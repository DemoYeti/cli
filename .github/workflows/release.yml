name: Release
on:
  push:
    branches:
      - master
env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10
  MACOSX_DEPLOYMENT_TARGET: 10.7

jobs:
  github_build:
    name: Build release binaries
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: railway-${{ needs.get_version.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz

          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: railway-${{ needs.get_version.outputs.version }}-x86_64-unknown-linux-musl.tar.gz

          - target: x86_64-apple-darwin
            os: macOS-11
            name: railway-${{ needs.get_version.outputs.version }}-x86_64-apple-darwin.tar.gz

          - target: aarch64-apple-darwin
            os: macOS-11
            name: railway-${{ needs.get_version.outputs.version }}-aarch64-apple-darwin.tar.gz

    runs-on: ${{ matrix.os }}
    continue-on-error: true
    env:
      RUSTFLAGS: ${{ matrix.rustflags || '' }}
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4

      - name: Get Version
        id: get_version
        run: echo "::set-output name=version::$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')"

      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build | Build [Cargo]
        run: cargo build --release --locked --target ${{ matrix.target }}

      - name: Post Build | Prepare artifacts
        run: |
          cd target/${{ matrix.target }}/release
          tar czvf ../../../${{ matrix.name }} railway
          cd -

      - name: Release | Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}

  create_release:
    name: Create Release
    needs: github_build
    runs-on: ubuntu-latest
    steps:
      - name: Get Version
        id: get_version
        run: echo "::set-output name=version::$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: ./artifacts

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/${{ matrix.name }}
          asset_name: ${{ matrix.name }}
          asset_content_type: application/gzip

  cargo_publish:
    name: Publish Cargo Package
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Publish
        uses: softprops/cargo-publish@v1
        with:
          token: ${{ secrets.CARGO_REGISTRY_TOKEN }}